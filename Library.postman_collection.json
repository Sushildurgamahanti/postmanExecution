{
	"info": {
		"_postman_id": "a4969892-d6a6-4d25-b542-3e2b977fb77f",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21059976"
	},
	"item": [
		{
			"name": "Addbook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.environment.set(\"flag\", false);\r",
							"const jsondata = pm.response.json();\r",
							"var req = JSON.parse(pm.request.body.raw);\r",
							"console.log(jsondata);\r",
							"console.log(jsondata.ID);\r",
							"const bookid = jsondata.ID;\r",
							"pm.environment.set(\"book_id\",bookid);\r",
							"\r",
							"// isbn and aisle-lets concatenate =\r",
							"\r",
							"\r",
							"\r",
							"function cleanupScript()\r",
							"    {\r",
							"        const book_id = generateBookId();\r",
							"        pm.environment.set(\"book_id\",book_id);\r",
							"        pm.environment.set(\"flag\", true);\r",
							"        postman.setNextRequest(\"DELETE BOOK\");\r",
							"    }\r",
							"function generateBookId()\r",
							"{ \r",
							"   const expected_id = req.isbn + req.aisle;\r",
							"   return expected_id;   \r",
							"\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Status Code is 200\",function()\r",
							"{\r",
							"    try\r",
							"    {\r",
							" pm.response.to.have.status(200);\r",
							"\r",
							"    }\r",
							"    catch(err)\r",
							"    {\r",
							"        if(jsondata.msg.includes(\"exists\"))\r",
							"        {\r",
							"            cleanupScript();\r",
							"        }\r",
							"    }\r",
							"\r",
							"    pm.expect(jsondata).have.property(\"Msg\"); \r",
							"    pm.expect(jsondata.Msg).to.eql(\"successfully added\");\r",
							"}); \r",
							"pm.test(\"Headers cookies responstime validations\",function()\r",
							"{\r",
							"pm.response.to.have.header(\"Content-Type\");\r",
							"pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"pm.expect(pm.response.text()).to.include(\"successfully added\"); \r",
							"});\r",
							"pm.test (\"ID logic validations\",function()\r",
							"{\r",
							"   const isbn_val= pm.collectionVariables.get(\"isbn\")\r",
							"   var req = JSON.parse(pm.request.body.raw);\r",
							"   const aisle_val = req.aisle\r",
							"   const expected_id = isbn_val + aisle_val;\r",
							"   console.log(expected_id);\r",
							"   pm.expect(expected_id).to.eql(bookid);\r",
							"   //pm.expect().to.eql(bookid);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// pm.test(\"validate sum of numebers is equal to 10\",function()\r",
							"// {\r",
							"    \r",
							"//     const var1 = pm.environment.get(\"X\");\r",
							"//     const var2 = pm.collectionVariables.get(\"Y\");\r",
							"//     const sum = parseInt(var1) + parseInt(var2) ;\r",
							"//     console.log(sum);\r",
							"\r",
							"// }\r",
							"// )\r",
							"// pm.test(\"validate avg of numbers\",function()\r",
							"// {\r",
							"    \r",
							"//     const var1 = pm.environment.get(\"x\");\r",
							"//     const var2 = pm.collectionVariables.get(\"y\");\r",
							"//     const var3 = pm.globals.get(\"z\");\r",
							"//     const avg = (parseFloat(var1) + parseFloat(var2) + parseFloat(var3))/3 ;\r",
							"//     console.log(avg);\r",
							"\r",
							"// }\r",
							"// )\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//RS45464\r",
							"console.log(pm.globals.get(\"companycode\"));\r",
							"const code =pm.globals.get(\"companycode\");\r",
							"const val =pm.variables.replaceIn('{{$randomInt}}')\r",
							"console.log(val);\r",
							"pm.collectionVariables.set(\"isbn\",code + val);\r",
							"pm.collectionVariables.set(\"author_name\",\"sushil\");\r",
							"\r",
							"// pm.environment.set(\"X\", 10);\r",
							"// pm.collectionVariables.set(\"Y\",15);\r",
							"\r",
							"// pm.environment.set(\"x\",10);\r",
							"// pm.collectionVariables.set(\"y\",20);\r",
							"// pm.globals.set(\"z\",10);\r",
							"\r",
							"pm.collectionVariables.set(\"book_name\", pm.iterationData.get(\"Bookname\"));\r",
							"console.log(pm.collectionVariables.get(\"book_name\"));\r",
							"pm.collectionVariables.set(\"author_name\",pm.iterationData.get(\"Author\"));\r",
							"console.log(pm.collectionVariables.get(\"Author\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"{{book_name}}\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"227863\",\r\n\"author\":\"{{author_name}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET BOOK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getBookResponse = pm.response.json(); \r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"//   ]};\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"validate the json response logic\",function()\r",
							"{\r",
							"console.log(getBookResponse);\r",
							"pm.expect(getBookResponse[0].author).eql(pm.collectionVariables.get(\"author_name\"))\r",
							" \r",
							"});\r",
							"pm.test(\"validate the json response Schema\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE BOOK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" \r",
							"\r",
							"const schema = {\r",
							" \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"validate the json response code\",function()\r",
							"{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.eql(\"book is successfully deleted\");\r",
							"\r",
							"    if(pm.environment.get(\"flag\"))\r",
							"    {\r",
							"        postman.setNextRequest(\"Addbook\");\r",
							"    }\r",
							"\r",
							"});\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{book_id}}\"\r\n \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Y",
			"value": "5",
			"type": "string",
			"disabled": true
		},
		{
			"key": "y",
			"value": "20",
			"type": "string",
			"disabled": true
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Y",
			"value": ""
		},
		{
			"key": "y",
			"value": ""
		},
		{
			"key": "flag",
			"value": "",
			"type": "string"
		}
	]
}